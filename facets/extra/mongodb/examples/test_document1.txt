"""
A command-line tool for indexing a new document.
"""

#-------------------------------------------------------------------------------
#  Imports:
#-------------------------------------------------------------------------------

import sys

from time import (
    time
)

from facets.api import (
    HasFacets, Any
)

from facets.core.facet_base import ( 
    read_file
)

from document_classes import (
    IndexDocument, IndexWord
)

#-------------------------------------------------------------------------------
#  Constants:
#-------------------------------------------------------------------------------

# The correct command usage message:
Usage = """
The correct usage is:
    python document_index.py document [ document, ..., document ]
where:
    document = The name of a text file to be indexed.
"""[1:-1]

# The set of valid characters that can appear in a word:
Letters = 'abcdefghijklmnopqrstuvwxuyABCDEFGHIJKLMNOPQRSTUVWXYZ'

#-------------------------------------------------------------------------------
#  'DocumentIndex' class:
#-------------------------------------------------------------------------------

class DocumentIndexer ( HasFacets ):
    """ Allows new documents to be added to the document index database.
    """

    #-- Facet Definitions ------------------------------------------------------

    # A mapping from words we've already seen to IndexWord objects:
    all_words = Any( {} )

    #-- Public Methods ---------------------------------------------------------

    def add ( self, document ):
        """ Adds the document whose file name is specified by *document* to the
            document index database.
        """
        # Only index documents that we have not already indexed previously:
        if IndexDocument( document = document ).load() is not None:
            print ("'%s' has already been indexed and is being ignored." % 
                   document)

            return False

        # Read the contents of the document (if possible):
        text = read_file( document )
        if text is None:
            print "'%s' could not be read and is being ignored." % document

            return False

        # Parse the document into words and add each valid word to the document 
        # index, creating new entries in the index for newly encountered words:
        words     = 0
        all_words = self.all_words
        for word in text.split():
            word = self.clean( word )
            if word != '':
                index_word = all_words.get( word )
                if index_word is None:
                    all_words[ word ] = index_word = \
                        IndexWord( word = word ).load( add = True )

                index_word.documents.add( document )
                index_word.count += 1
                words            += 1

        # Add a new entry for the document to the index: 
        IndexDocument( document = document, words = words ).save()

        # Indicate that the document was processed successfully:
        print "'%s' has been added to the document index." % document

        return True

    #-- Private Methods --------------------------------------------------------

    def clean ( self, word ):
        """ Returns a cleaned up version of the original *word* with all
            punctuation and digits removed and converted to lowercase.
        """
        return ''.join( [ c in word if c in Letters ] ).lower()

#-- Run the command ------------------------------------------------------------

if __name__ == '__main__':
    # Make sure the command usage is correct, other print an error and exit:
    if len( sys.argv ) < 2:
        print Usage
        sys.exit( 1 )
    
    # Create a document indexer and use it to index each command line argument:
    now       = time()    
    documents = 0
    indexer   = DocumentIndexer()
    for document in sys.argv[1:]:
        documents += indexer.add( document )

    # Display a summary of the indexing results and execution time:
    print '%d documents processed in %.3f seconds.' % ( 
          documents, time() - now ) 
    
#-- EOF ------------------------------------------------------------------------

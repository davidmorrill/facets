"""
Provides a development framework that makes available most of the tools
contained in this package.
"""

#-------------------------------------------------------------------------------
#  License: See sections (A) and (B) of the .../facets/LICENSE.txt file.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Imports:
#-------------------------------------------------------------------------------

from string \
    import digits

from cPickle \
    import dumps

from os.path \
    import isfile, isdir, join, dirname

from facets.api \
    import HasFacets, HasPrivateFacets, UIView, Str, List, Dict, Instance,    \
           Any, Enum, Bool, Float, Directory, Code, Property, Callable,       \
           Button, View, VGroup, HGroup, Item, UItem, UIInfo, NotebookEditor, \
           StringGridEditor, CodeEditor, Handler, UIInfo, SyncValue,          \
           on_facet_set, property_depends_on

from facets.core.facet_base \
    import get_resource_path, write_file, time_stamp, class_name_to_file_name

from facets.ui.constants \
    import screen_dx, screen_dy

from facets.ui.key_bindings \
    import KeyBindings, KeyBinding

from facets.ui.menu \
    import MenuBar, Menu, Action, ActionGroup, Separator

from facets.ui.pyface.timer.api \
    import do_later

from facets.extra.features.api \
    import add_standard_features, ConnectFeature, LayoutFeature

#-------------------------------------------------------------------------------
#  Constants:
#-------------------------------------------------------------------------------

# The set of features that are not exported as part of a generated tool:
IgnoredFeatures = { ConnectFeature, LayoutFeature }

# The Facets UI database key for all exported tools:
ExportedTools = 'facets.extra.tools.tools.ExportedTools'

#-- Application Menu Bar Definition --------------------------------------------

perspective_menu = Menu(
    ActionGroup(
        Action(
            name         = 'New...',
            action       = '_on_add_perspective'
        ),
        Action(
            name         = 'Rename...',
            action       = '_on_rename_perspective',
            enabled_when = "object.perspective_name!='Default'"
        ),
        Action(
            name         = 'Delete',
            action       = '_on_delete_perspective',
            enabled_when = "object.perspective_name!='Default'"
        ),
    ),
    Separator(),
    ActionGroup(
        Action(
            name         = 'Clone...',
            action       = '_on_clone_perspective'
        ),
        Action(
            name         = 'Export as stand-alone tool...',
            action       = '_on_export_perspective'
        ),
    ),
    Separator(),
    ActionGroup(
        Menu(
            ActionGroup(
                Action(
                    name         = 'Unlocked',
                    action       = '_on_unlock_perspective',
                    style        = 'toggle',
                    checked_when = "object.perspective.dock_style=='tab'"
                ),
                Action(
                    name         = 'Locked',
                    action       = '_on_lock_perspective',
                    style        = 'toggle',
                    checked_when = "object.perspective.dock_style=='fixed'"
                ),
                Action(
                    name         = 'Frozen',
                    action       = '_on_freeze_perspective',
                    style        = 'toggle',
                    checked_when = "object.perspective.dock_style=='locked'"
                ),
            ),
            name = 'Mode'
        )
    ),
    name = 'Perspective'
)

debug_menu = Menu(
    ActionGroup(
        Action(
            name         = 'Enable FBI',
            action       = '_on_enable_fbi',
            enabled_when = 'not object.fbi_enabled'
        ),
    ),
    name = 'Debug'
)

#-- Exported Tool Templates ----------------------------------------------------

ConnectionTemplate = """
            Connection( connection = '%s',
                        object1    = self.tool_%d,
                        name1      = '%s',
                        object2    = self.tool_%d,
                        name2      = '%s'
            )
"""[1:-1]

ConnectionsDefaultTemplate = """

    def _connections_default ( self ):
        return [
%s
        ]
"""[:-1]

FeaturesTemplate = """

    # The list of features used by the tool:
    features = [ %s ]
"""[:-1]

ExportedToolTemplate = '''
"""
# %(class_name)s: A Facets component tool. #

Perspective:

- %(perspective)s

Component Tools:

- %(tools)s%(feature_set)s

Generated by:

- facets.extra.tools.tools

Date/Time:

- %(date)s
"""

#-------------------------------------------------------------------------------
#  Imports:
#-------------------------------------------------------------------------------

from facets.extra.helper.generated_tool \\
    import GeneratedTool, ToolInstance, Connection

%(imports)s

#-------------------------------------------------------------------------------
#  '%(class_name)s' class:
#-------------------------------------------------------------------------------

class %(class_name)s ( GeneratedTool ):

    #-- Class Constants --------------------------------------------------------

    #-- Facet Definitions ------------------------------------------------------

    # The name of the tool:
    name = '%(title)s'

    # The component tools:
    %(tool_facets)s%(features)s

    # The DockWindow tab style to use for each component tool:
    dock_style = %(dock_style)r

    # The default width and height of the tool:
    width  = %(width).2f
    height = %(height).2f

    # The pickled string form of the layout template used by the tool contents:
    _template = %(template)s

    #-- Facet Default Values ---------------------------------------------------%(connections_default)s

#-- Make tool compatible with Facets demo framework ----------------------------

demo = %(class_name)s

#-- Start the tool (if invoked from the command line) --------------------------

if __name__ == '__main__':
    %(class_name)s().edit_facets()

#-- EOF ------------------------------------------------------------------------
'''[1:-1]

#-------------------------------------------------------------------------------
#  Helper Functions:
#-------------------------------------------------------------------------------

def tools ( object      = None,           # Application object
            application = 'Facets',       # The application name
            tools       = None,           # Default list of perspective tools
            toolbox     = None,           # The toolbox of available tools
            show        = True ):         # Display the Tool's view now?
    """ Helps a user develop/debug an application using a variety of tools.
    """
    # Make sure that all of the DockWindow features have been added:
    add_standard_features()

    # Create the Tools object:
    result = Tools(
        object             = object,
        application        = application,
        default_tool_names = tools or [],
        toolbox            = toolbox or Toolbox()
    )

    # Display the tool's view (if requested):
    if show:
        result.edit_facets()

    return result


def user_name_for ( name ):
    """ Returns a properly formatted name for use in the user interface.
    """
    name = str( name ).strip()

    return (name[:1].upper() + name[1:])


def base_tool_name ( tool_name ):
    """ Returns the base tool name (e.g. 'Universal Inspector') for a specified
        tool name which may include a numeric suffix (e.g.
        'Universal Inspector 2').
    """
    for i in xrange( len( tool_name ) - 1, -1, -1 ):
        if tool_name[ i ] not in digits:
            if tool_name[ i ] != ' ':
                break

            return tool_name[ : i ].strip()

    return tool_name

#-------------------------------------------------------------------------------
#  'Tool' class:
#-------------------------------------------------------------------------------

class Tool ( HasPrivateFacets ):
    """ Base class for all Facets tools.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The name of the tool:
    name = Str( 'Unknown Tool', editable = False )

    # The id used for the default tool view:
    id = Str( editable = False )

    # The id used to save state information for the tool:
    state_id = Str( save_state_id = True, editable = False )

    #-- Facet View Definitions -------------------------------------------------

    def facet_view ( self, name = None, view_element = None ):
        view = super( Tool, self ).facet_view( name, view_element )
        if (name is None) and (view is not None):
            view.id = self.id

        return view

    #-- Facet Default Values ---------------------------------------------------

    def _id_default ( self ):
        return '%s.%s.view' % (
            self.__class__.__module__,
            self.name if self.name != '' else self.__class__.__name__
        )


    def _state_id_default ( self ):
        id = self.id
        if id.endswith( '.view' ):
            id = id[:-5]

        return (id + '.state')

#-------------------------------------------------------------------------------
#  'XTool' class:
#-------------------------------------------------------------------------------

class XTool ( Tool ):
    """ Extended tool base class that provides access to all other tools in the
        same perspective/composite tool.
    """

    #-- Facet Definitions ------------------------------------------------------

    # All tools contained in the perspective/composite tool (excluding this
    # tool):
    tools = List( editable = False ) # Instance( HasFacets )

#-------------------------------------------------------------------------------
#  'Toolbox' class:
#-------------------------------------------------------------------------------

class Toolbox ( HasPrivateFacets ):
    """ Defines a class for representing a suite of tools as a Facets compatible
        menu that can be added to an application as well as a mechanism for
        creating tools described by the toolbox.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The name of the file containing the description of the toolbox contents:
    file_name = Property

    # Mapping from tool names to fully-qualified package/class names:
    tool_map = Dict

    # The top-level Menu item for creating any tool in the toolbox:
    menu = Property

    # The Tools object this toolbox is associated with:
    tools = Any

    #-- HasFacets Interface ----------------------------------------------------

    def facets_init ( self ):
        """ Initializes the object.
        """
        if self.file_name == '':
            self.file_name = 'tool.box'

    #-- Public Methods ---------------------------------------------------------

    def add_tool ( self, name ):
        """ Adds the tool with the specified name.
        """
        self.tools.add_tool( name )


    def make_tool ( self, name, **facets ):
        """ Returns an instance of a tool with the specified name.
        """
        root_name = base_tool_name( name )
        module_name, class_name = self.tool_map[ root_name ].rsplit( '.', 1 )
        module = __import__( module_name )
        for component in module_name.split( '.' )[1:]:
            module = getattr( module, component )

        tool = getattr( module, class_name )( **facets )
        if hasattr( tool, 'name' ):
            tool.name = name

        return tool

    #-- Property Implementations -----------------------------------------------

    def _get_file_name ( self ):
        return (self._file_name or '')

    def _set_file_name ( self, file_name ):
        if dirname( file_name ) == '':
            # If no path was specified for the toolbox file, try to find one by
            # searching the directories in the caller's call stack:
            try:
                for level in xrange( 2, 6 ):
                    path = join( get_resource_path( level ), file_name )
                    if isfile( path ):
                        file_name = path

                        break
            except:
                pass

        old, self._file_name = self._file_name, file_name
        if old != file_name:
            self.facet_property_set( 'file_name', old, file_name )


    @property_depends_on( 'file_name' )
    def _get_menu ( self ):
        stack      = []
        cur_item   = None
        last_item  = top_item = ( 'Tools', [] )
        cur_indent = -1
        tool_map   = {}
        file       = open( self.file_name, 'rb' )
        for line in file:
            line2 = line.rstrip()
            line  = line2.strip()
            if (line != '') and (line[:1] != '#'):
                if line[:1] == '-':
                    cur_item[1].append( '' )
                else:
                    col = line.find( ':' )
                    if col < 0:
                        item = ( line, [] )
                    else:
                        item             = line[ : col ].strip()
                        tool_map[ item ] = line[ col + 1: ].strip()

                    indent = len( line2 ) - len( line )
                    if indent < cur_indent:
                        while indent < cur_indent:
                            cur_indent, cur_item = stack.pop()
                    elif indent > cur_indent:
                        stack.append( ( cur_indent, cur_item ) )
                        cur_item = last_item

                    cur_item[1].append( item )
                    cur_indent = indent
                    last_item  = item

        file.close()
        self.tool_map = tool_map

        return self._make_menu( top_item )

    #-- Private Methods --------------------------------------------------------

    def _make_menu ( self, item, include_find = True ):
        """ Returns the Menu object corresponding to the specified menu item.
        """
        items    = []
        contents = []
        if include_find:
            contents = [
                ActionGroup(
                    Action( name   = 'Find tool...',
                            action = 'search_tools',
                    ),
                Separator() )
            ]

        for sub_item in item[1]:
            if isinstance( sub_item, basestring ):
                if sub_item == '':
                    if len( items ) > 0:
                        contents.append( ActionGroup( *items ) )
                        contents.append( Separator() )
                        items = []
                else:
                    items.append(
                        ToolAction( name = sub_item, toolbox = self ) )
            else:
                items.append( self._make_menu( sub_item, False ) )

        if len( items ) > 0:
            contents.append( ActionGroup( *items ) )

        return Menu( name = item[0], *contents )

#-------------------------------------------------------------------------------
#  'SearchToolbox' class:
#-------------------------------------------------------------------------------

class SearchToolbox ( UIView ):
    """ Defines a class for allowing the user to search for, select and add a
        tool defined for a specified Toolbox using a searchable, pop-up dialog.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The Tools instance associated with this object:
    tools = Any # Instance( Tools )

    # The current tool name being searched for:
    search = Str

    # The list of tools matching the current search string:
    search_tools = Property( List )

    # The currently selected tool:
    selected = Str

    # Event fired when the search text should be cleared:
    clear = Button( '@icons2:Delete' )

    #-- Facet View Definitions -------------------------------------------------

    def default_facets_view ( self ):
        return View(
            VGroup(
                HGroup(
                    Item( 'search', label = 'Tool', springy = True ),
                    UItem( 'clear' ),
                    group_theme = '#themes:toolbar_group'
                ),
                VGroup(
                    UItem( 'search_tools',
                           editor = StringGridEditor( selected = 'selected' )
                    )
                ),
                label       = 'Search Tools',
                group_theme = '@xform:btd?L20'
            ),
            id     = 'facets.extra.tools.tools.SearchToolbox.' +
                     self.tools.application,
            kind   = 'popout',
            width  = 0.12,
            height = 0.50
        )

    #-- Property Implementations -----------------------------------------------

    @property_depends_on( 'search' )
    def _get_search_tools ( self ):
        self.facet_setq( selected = '' )
        search = self.search.strip().lower()

        return sorted(
            [ tool for tool in self.tools.toolbox.tool_map.iterkeys()
                   if tool.lower().find( search ) >= 0 ]
        )

    #-- Facet Event Handlers ---------------------------------------------------

    def _selected_set ( self, selected ):
        """ Handles the 'search_selected' facet being changed.
        """
        self.tools.add_tool( selected )


    def _clear_set ( self ):
        """ Handles the 'clear' button being clicked.
        """
        self.search = ''

#-------------------------------------------------------------------------------
#  'ToolAction' class:
#-------------------------------------------------------------------------------

class ToolAction ( Action ):
    """ Custom Action for creating tools.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The Toolbox object the action should be routed to:
    toolbox = Instance( Toolbox )

    #-- Action Interface -------------------------------------------------------

    def perform ( self ):
        """ Perform the action by requesting the Toolbox to complete it.
        """
        self.toolbox.add_tool( str( self.name ) )

#-------------------------------------------------------------------------------
#  Key bindings tables:
#-------------------------------------------------------------------------------

perspective_key_bindings = KeyBindings(
    KeyBinding( binding     = 'Alt-t',
                method      = '_select_next_tool',
                description = 'Selects the next tab on the current tools '
                              'page.' ),
    KeyBinding( binding     = 'Alt-Shift-t',
                method      = '_select_previous_tool',
                description = 'Selects the previous tab on the current tools '
                              'page.' ),
    KeyBinding( binding     = 'Control-Shift-t',
                method      = '_search_tools',
                description = 'Search for a tool to add.' )
)

#-------------------------------------------------------------------------------
#  'Perspective' class:
#-------------------------------------------------------------------------------

class Perspective ( Handler ):
    """ Manages a particular configuration of tools and their display layout.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The id associated with this perspective:
    id = Str

    # The View id of this perspective:
    view_id = Property

    # The optional object being developed/tested:
    object = Instance( HasFacets )

    # The names of all currently active tools:
    tool_names = List( Str )

    # The default list of tool names to use:
    default_tool_names = List( Str )

    # All currently active tools:
    tools = List( HasFacets )

    # The currently selected tool:
    selected = Instance( HasFacets )

    # The cache of previously active, but now deleted, tools:
    tool_cache = Dict

    # The dock_style to use for the tools in the perspective:
    dock_style = Enum( 'tab', 'fixed', 'locked' )

    # Is this a clone, or an embedded, perspective?
    is_clone = Bool( False )

    # The Toolbox object used to create tools:
    toolbox = Instance( Toolbox )

    # The user interface object for the Tools view:
    info = Instance( UIInfo )

    # The DockWindow associated with the perspective:
    dock_window = Property

    # The list of active connections for the perspective:
    connections = Property # ( List )

    # The layout used by the perspective:
    layout = Property

    # The features used by the contents of the perspective:
    features = Property

    # The size of the perspective:
    size = Property

    #-- Facet View Definitions -------------------------------------------------

    def default_facets_view ( self ):
        """ Returns the View to use with this perspective.
        """
        title = ''
        if self.is_clone:
            title = self.id + ' Perspective'

        return View(
            Item( 'tools',
                  style      = 'custom',
                  show_label = False,
                  id         = 'tools',
                  editor     = NotebookEditor(
                      deletable  = True,
                      dock_style = SyncValue( self, 'dock_style' ),
                      export     = 'DockWindowShell',
                      layout     = 'columns',
                      max_items  = 2,
                      page_name  = '.name',
                      selected   = 'selected'
                  )
            ),
            title        = title,
            id           = self.view_id,
            key_bindings = perspective_key_bindings,
            resizable    = True,
            width        = 0.5,
            height       = 0.5
        )

    #-- HasFacets Interface ----------------------------------------------------

    def facets_init ( self ):
        """ Initializes the object.
        """
        dock_style, tool_names = self.facet_db_get(
            self.id, ( 'tab', self.default_tool_names ) )

        if self.is_clone and (dock_style == 'tab'):
            dock_style = 'fixed'

        self.facet_setq( dock_style = dock_style, tool_names = tool_names )

    #-- Handler Interface ------------------------------------------------------

    def init_info ( self, info ):
        self.info = info

        return True

    #-- Public Methods ---------------------------------------------------------

    def dispose ( self ):
        """ Removes any data from the facet database for this object.
        """
        self.facet_db_set( self.id )


    @on_facet_set( 'dock_style' )
    def activate ( self ):
        """ Used to re-activate the perspective after some change has occurred
            that affects its persistent state.
        """
        tool_names = self.tool_names[:]
        for i, tool in enumerate( self.tools ):
            tool_names[ i ] = getattr( tool, 'name', tool_names[ i ] )

        self.facet_db_set( self.id, ( self.dock_style, tool_names ) )

    #-- Facets Default Values --------------------------------------------------

    def _tools_default ( self ):
        tools = []
        for tool_name in self.tool_names:
            tool = self._make_tool( tool_name )
            self._check_tool_name( tool, tools )
            tools.append( tool )

        # Make sure any XTool instances receive a copy of the tools list:
        for tool in tools:
            self._check_xtool( tool, tools )

        return tools

    #-- Property Implementations -----------------------------------------------

    def _get_view_id ( self ):
        return ('facets.extra.tools.tools.Perspective.' + self.id)


    def _get_dock_window ( self ):
        # fixme: This is a rather ugly way of getting the desired information...
        return self.info.tools._dock_window


    def _get_connections ( self ):
        result = set()
        for control in self.dock_window.dock_controls:
            for feature in control.features_of_type( ConnectFeature ):
                for connections in feature.connections.itervalues():
                    result.update( connections )

        return result


    def _get_features ( self ):
        features = set()
        for control in self.dock_window.dock_controls:
            for feature in control.features:
                klass = feature.__class__
                if klass not in IgnoredFeatures:
                    features.add( feature.__class__ )

        return features


    def _get_layout ( self ):
        result = self.dock_window.dock_sizer.get_structure()

        # Although the tools are closeable in the 'tools' environment, they
        # should not be in the generated tool environment, so disable closing:
        for control in result.get_controls():
            control.closeable = False

        return result


    def _get_size ( self ):
        return self.dock_window.control.client_size

    #-- Facet Event Handlers ---------------------------------------------------

    def _tools_items_set ( self, event ):
        """ Handles tools being deleted from the tools list.
        """
        for i in xrange( len( event.removed ) - 1, -1, -1 ):
            index     = event.index + i
            tool      = event.removed[ i ]
            tool_name = base_tool_name( self.tool_names[ index ] )
            del self.tool_names[ index ]
            if hasattr( tool, 'name' ):
                tool.name = tool_name

            self.tool_cache.setdefault( tool_name, [] ).append( tool )
            for connection in self.connections:
                if (tool is connection.object1) or (tool is connection.object2):
                    connection.feature1.disconnect(
                        connection.name1, connection
                    )

            # If the deleted tool is an XTool, remove all of its tools:
            if isinstance( tool, XTool ):
                del tool.tools[:]

        # For each remaining tool that is an XTool, remove each deleted tool
        # from its list of tools:
        for tool in self.tools:
            if isinstance( tool, XTool ):
                for deleted_tool in event.removed:
                    if deleted_tool is not tool:
                        tool.tools.remove( deleted_tool )


    @on_facet_set( 'tool_names[]' )
    def _tool_names_modified ( self, added ):
        """ Handles adding new tool names to the perspective.
        """
        tools     = self.tools
        new_tools = []
        for tool_name in added:
            # See if we can use an unused, cached tool; otherwise make a new
            # one:
            cached = self.tool_cache.get( base_tool_name( tool_name ), [] )
            if len( cached ) > 0:
                tool = cached.pop()
            else:
                tool = self._make_tool( tool_name )

            # Make sure the tool has a unique name among all active tools:
            self._check_tool_name( tool, tools )

            # Add the new tool to the list of active tools:
            tools.append(     tool )
            new_tools.append( tool )

        # If any of the added tools are instances of XTool, make sure that they
        # are provided with a copy of all of the other tools:
        for tool in new_tools:
            self._check_xtool( tool, tools )

        # For each XTool previously in the tools list, add each new tool to its
        # list:
        for tool in tools:
            if (tool not in new_tools) and isinstance( tool, XTool ):
                tool.tools.extend( new_tools )

        self.activate()

    #-- Commands ---------------------------------------------------------------

    def _select_next_tool ( self, info = None ):
        """ Selects the next tool tab.
        """
        self._select_tab( 1 )


    def _select_previous_tool ( self, info = None ):
        """ Selects the previous tool tab.
        """
        self._select_tab( -1 )


    def _search_tools ( self ):
        print "_search_tools:"
        """ Allow the user to find a tool to add to the perspective.
        """
        self.toolbox.tools.search_tools()

    #-- Private Methods --------------------------------------------------------

    def _select_tab ( self, delta ):
        """ Selects the next/previous tool tab.
        """
        tools = self.tools
        if len( tools ) > 1:
            try:
                index = tools.index( self.selected ) + delta
            except:
                index = 0

            self.selected = tools[ index % len( tools ) ]


    def _make_tool ( self, tool_name, **facets ):
        """ Creates an instance of the specified tool.
        """
        tool = self.toolbox.make_tool( tool_name )

        if tool_name == 'Universal Inspector':
            tool.item = self.object

        return tool


    def _check_xtool ( self, tool, tools ):
        """ Checks to see if the tool specified by *tool* is an XTool instance
            and, if so, provides it with a copy of the tools specified by
            *tools* (excluding itself).
        """
        if isinstance( tool, XTool ):
            copy_tools = tools[:]
            copy_tools.remove( tool )
            tool.tools = copy_tools


    def _check_tool_name ( self, tool, tools ):
        """ Make sure that the specified tool does not have a name already used
            by a tool in the specified list.
        """
        if hasattr( tool, 'name' ):
            names = set( [ t.name for t in tools ] )
            name  = tool.name
            if name in names:
                for i in xrange( len( name ) - 1, -1, -1 ):
                    if name[ i ] not in digits:
                        if name[ i ] == ' ':
                            name = name[ : i ].strip()

                        break

                i = 2
                while tool.name in names:
                    tool.name = '%s %d' % ( name, i )
                    i        += 1

            self._set_tool_id( tool )


    def _set_tool_id ( self, tool ):
        """ Sets the correct tool id for the tool specified by *tool*.
        """
        if isinstance( tool, Tool ):
            tool.id = '%s#%s.view' % ( self.view_id, tool.name )

#-------------------------------------------------------------------------------
#  'Tools' class:
#-------------------------------------------------------------------------------

class Tools ( Handler ):

    #-- Facet Definitions ------------------------------------------------------

    # The user interface object for the Tools view:
    info = Instance( UIInfo )

    # The application name associated with this tool set:
    application = Str( 'Facets' )

    # The optional object being developed/tested:
    object = Instance( HasFacets )

    # The currently active perspective:
    perspective = Instance( Perspective )

    # The name of the currently active perspective:
    perspective_name = Str

    # The list of currently available perspective names:
    perspective_names = List( Str )

    # The Group object used to manage all perspective names:
    perspective_group = Instance( ActionGroup, () )

    # The default list of tool names to include in a new perspective:
    default_tool_names = List( Str )

    # The toolbox object used to add and create tools:
    toolbox = Instance( Toolbox )

    # Has the FBI been enabled yet?
    fbi_enabled = Bool( False )

    # User supplied function to determine if the tools window can be closed:
    on_close = Callable

    # Cache for already opened perspectives:
    perspective_cache = Dict

    # Modified when something that affects the user interface is changed:
    modified = Bool( True )

    #-- Facets UI Views --------------------------------------------------------

    def default_facets_view ( self ):
        return View(
            Item( 'perspective',
                  id         = 'perspective',
                  style      = 'custom',
                  show_label = False
            ),
            title     = self.application + ' Developer Tools',
            id        = 'facets.extra.tools.tools.Tools.' + self.application,
            width     = 0.75,
            height    = 0.75,
            resizable = True,
            menubar   = MenuBar(
                            perspective_menu,
                            Menu( self.perspective_group, name = 'Switch' ),
                            self.toolbox.menu,
                            debug_menu
                        )
        )

    #-- Facets Interface -------------------------------------------------------

    def facets_init ( self ):
        """ Initializes the object.
        """
        self.perspective_names = self.facet_db_get( self.application,
                                                    [ 'Default' ] )
        self.perspective_name  = self.facet_db_get(
            self.application + ':Perspective', 'Default'
        )

    #-- Facet Event Handlers ---------------------------------------------------

    def _perspective_name_set ( self ):
        """ Handles the name of the currently active perspective being changed.
        """
        name = self.perspective_name
        self.facet_db_set( self.application + ':Perspective', name )
        self.perspective = self._perspective()

        # Make sure the correct 'Switch' menu item is checked:
        for item in self.perspective_group.items:
            item         = item.action
            item.checked = (name == item.name)


    @on_facet_set( 'perspective_names[]' )
    def _perspective_names_modified ( self ):
        """ Handles the list of perspective names being modified.
        """
        names = self.perspective_names[:]
        names.remove( 'Default' )
        names.sort()
        names.insert( 0, 'Default' )

        self.facet_db_set( self.application, names )

        # Rebuild the 'Switch' menu contents:
        cur_name = self.perspective_name
        group    = self.perspective_group
        group.clear()
        for name in names:
            group.append(
                PerspectiveAction( name    = name,
                                   style   = 'toggle',
                                   checked = (name == cur_name),
                                   tools   = self ) )

        if group.parent is not None:
            group.parent.changed = True


    def _toolbox_set ( self, toolbox ):
        """ Handles the 'toolbox' facet being changed.
        """
        if toolbox is not None:
            toolbox.tools = self

    #-- Menu Action Handlers ---------------------------------------------------

    def _on_add_perspective ( self, info ):
        """ Allows the user to add a new perspective.
        """
        ap = ChangePerspective( tools = self )
        if ap.edit_facets().result:
            name = user_name_for( ap.name )
            self.perspective_names.append( name )
            do_later( self.facet_set, perspective_name = name )
            # self.perspective_name = name


    def _on_delete_perspective ( self, info ):
        """ Allows the user to delete the current perspective.
        """
        self.perspective.dispose()
        self.perspective_names.remove( self.perspective_name )
        self.perspective_name = self.perspective_names[0]


    def _on_rename_perspective ( self, info ):
        """ Allows the user to rename the current perspective.
        """
        ap = ChangePerspective( tools = self )
        if ap.edit_facets().result:
            new_name    = user_name_for( ap.name )
            old_name    = self.perspective_name
            perspective = self.perspective

            perspective.dispose()
            perspective.id = '%s:%s' % ( self.application, new_name )
            perspective.activate()

            self.perspective_cache[ new_name ] = perspective
            del self.perspective_cache[ old_name ]

            self.perspective_names.remove( old_name )
            self.perspective_names.append( new_name )

            do_later( self.facet_set, perspective_name = new_name )
            #self.perspective_name = new_name


    def _on_clone_perspective ( self, info ):
        """ Creates in independent clone of the current perspective.
        """
        Perspective(
            id                 = self.perspective.id,
            object             = self.object,
            default_tool_names = self.default_tool_names,
            toolbox            = self.toolbox,
            is_clone           = True
        ).edit_facets()


    def _on_export_perspective ( self, info ):
        """ Exports the current perspective as a new external Python tool.
        """
        self._temp = ToolGenerator(
            perspective      = self.perspective,
            perspective_name = self.perspective_name
        )
        self._temp.edit_facets()


    def _on_unlock_perspective ( self, info ):
        """ Unlocks the current perspective.
        """
        self.perspective.dock_style = 'tab'
        self.modified               = not self.modified


    def _on_lock_perspective ( self, info ):
        """ Locks the current perspective.
        """
        self.perspective.dock_style = 'fixed'
        self.modified               = not self.modified


    def _on_freeze_perspective ( self, info ):
        """ Freezes the current perspective.
        """
        self.perspective.dock_style = 'locked'
        self.modified               = not self.modified


    def _on_enable_fbi ( self, info ):
        """ Enables the FBI debugger.
        """
        if not self.fbi_enabled:
            self.fbi_enabled = True

            from facets.extra.helper.fbi import bp
            bp()

    #-- Handler Interface ------------------------------------------------------

    def init_info ( self, info ):
        self.info = info

        return True


    def close ( self, info, is_ok ):
        if self.on_close is None:
            return True

        return self.on_close()


    def closed ( self, info, is_ok ):
        self.info = None

    #-- Public Methods ---------------------------------------------------------

    def add_tool ( self, name ):
        """ Adds the tool with the specified name.
        """
        self.perspective.tool_names.append( name )


    def search_tools ( self ):
        """ Allow the user to search for a new tool to add.
        """
        SearchToolbox( tools = self ).edit_facets()


    def activate ( self ):
        """ Creates the user interface for the Tools object or makes sure it is
            on top if it is already open.
        """
        info = self.info
        if info is None:
            self.edit_facets()
        else:
            info.ui.control.activate()

    #-- Private Methods --------------------------------------------------------

    def _perspective ( self ):
        """ Returns the Perspective object for the current selected perspective
            name.
        """
        name        = self.perspective_name
        perspective = self.perspective_cache.get( name )
        if perspective is None:
            id = '%s:%s' % ( self.application, self.perspective_name )

            self.perspective_cache[ name ] = perspective = Perspective(
                id                 = id,
                object             = self.object,
                default_tool_names = self.default_tool_names,
                toolbox            = self.toolbox
            )

        return perspective

#-------------------------------------------------------------------------------
#  'ToolGenerator' class:
#-------------------------------------------------------------------------------

class ToolGenerator ( HasPrivateFacets ):
    """ Generates a new component tool Python source file from a perspective.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The perspective the component tool is being generated from:
    perspective = Instance( Perspective )

    # The name of the perspective:
    perspective_name = Str

    # The source code for the generated component tool class:
    code = Property( Code )

    # The window title for the generated tool:
    title = Str

    # The class name of the generated tool:
    class_name = Str

    # The width of the generated tool window:
    width = Float( 0.8 )

    # The height of the generated tool window:
    height = Float( 0.8 )

    # The file path to save the generated tool to:
    path = Directory

    # The Python source file name (minus path) to save the generated tool to:
    file_name = Str

    # Status message:
    status = Str

    # Save the source code to the specified file name:
    save = Button( 'Save' )

    # Is there source code ready to be saved?
    saveable = Property

    # Dictionary used to generate the source code from a template:
    data = Any( {} )

    #-- Facet View Definitions -------------------------------------------------

    view = View(
        VGroup(
            VGroup(
                VGroup(
                    Item( 'class_name' )
                ),
                HGroup(
                    Item( 'file_name', springy = True, label = '   File name' ),
                    Item( 'path',      springy = True )
                ),
                group_theme = '@xform:b?L35'
            ),
            VGroup(
                VGroup(
                    Item( 'title', label = '   Title' )
                ),
                HGroup(
                    Item( 'width',  springy = True ),
                    Item( 'height', springy = True, label = '    Height' )
                ),
                group_theme = '@xform:b?L35'
            ),
            HGroup(
                Item( 'status', style = 'readonly', springy = True ),
                Item( 'save',   enabled_when = 'saveable' ),
                group_theme = '@xform:b?L35',
                show_labels = False
            ),
            show_labels = False
        ),
        VGroup(
            Item( 'code',
                  style  = 'readonly',
                  editor = CodeEditor( show_line_numbers = False )
            ),
            show_labels = False
        ),
        title     = 'Facets Tool Generator',
        id        = 'facets.extra.tools.tools.ToolGenerator',
        width     = 0.5,
        height    = 0.5,
        resizable = True
    )

    #-- Public Methods ---------------------------------------------------------

    def facets_init ( self ):
        """ Initializes the object.
        """
        self.class_name = self.perspective_name.replace( ' ', '' )
        width, height   = self.perspective.size
        self.width      = min( 1.0, round( float( width  ) / screen_dx, 3 ) )
        self.height     = min( 1.0, round( float( height ) / screen_dy, 3 ) )

    #-- Property Implementations -----------------------------------------------

    @property_depends_on( 'class_name, title, width, height' )
    def _get_code ( self ):
        self.data.update( {
            'class_name': self.class_name.strip(),
            'title':      self.title.strip(),
            'width':      self.width,
            'height':     self.height
        } )

        return (ExportedToolTemplate % self.data)


    @property_depends_on( 'class_name, title, file_name, path' )
    def _get_saveable ( self ):
        return ((self.class_name.strip() != '') and
                (self.title.strip()      != '') and
                (self.file_name.strip()  != '') and
                isdir( self.path ))

    #-- Facet Default Values ---------------------------------------------------

    def _data_default ( self ):
        perspective = self.perspective
        classes     = list( set( [ t.__class__ for t in perspective.tools ] ) )
        feature_classes = list( perspective.features )
        classes.sort( lambda l, r: cmp( l.__name__, r.__name__ ) )
        feature_classes.sort( lambda l, r: cmp( l.__name__, r.__name__ ) )
        imports = [ 'from %s \\\n    import %s' % ( klass.__module__,
                                                    klass.__name__ )
                    for klass in classes + feature_classes ]
        features = feature_set = ''
        if len( feature_classes ) > 0:
            class_names = [ klass.__name__ for klass in feature_classes ]
            features    = (FeaturesTemplate % ', '.join( class_names ))
            feature_set = ('\n\nSupported Features:\n\n- %s' %
                           '\n- '.join( class_names ))

        tools = perspective.tools[:]
        tools.sort( lambda l, r: cmp( l.__class__.__name__,
                                      r.__class__.__name__ ) )
        tool_facets = [ "tool_%d = ToolInstance( %s, %r )" %
                        ( i + 1, tool.__class__.__name__, tool.name )
                        for i, tool in enumerate( tools ) ]
        tool_map = dict( [ ( tool, i+ 1 ) for i, tool in enumerate( tools ) ] )
        connections_default = ''
        connections         = perspective.connections
        if len( connections ) > 0:
            connection_items = [ ConnectionTemplate % ( connection.connection,
                            tool_map[ connection.object1 ], connection.name1,
                            tool_map[ connection.object2 ], connection.name2 )
                            for connection in connections ]
            connections_default = (ConnectionsDefaultTemplate %
                                   ',\n'.join( connection_items ))

        return {
            'perspective':         self.perspective_name,
            'date':                time_stamp(),
            'tools':               '\n- '.join( [ klass.__name__
                                                  for klass in classes ] ),
            'tool_facets':         '\n    '.join( tool_facets ),
            'imports':             '\n\n'.join( imports ),
            'dock_style':          perspective.dock_style,
            'template':            self._format_template(
                                       repr( dumps( perspective.layout ) ) ),
            'connections_default': connections_default,
            'features':            features,
            'feature_set':         feature_set
        }


    def _title_default ( self ):
        return self.perspective_name + ' Tool'


    def _path_default ( self ):
        return self.facet_db_get( 'path', '' )

    #-- Facet Event Handlers ---------------------------------------------------

    def _class_name_set ( self, class_name ):
        """ Handles the 'class_name' facet being changed.
        """
        self.file_name = class_name_to_file_name( class_name )


    def _save_set ( self ):
        """ Handles the 'save' facet being changed.
        """
        file_name = join( self.path, self.file_name )
        if write_file( file_name, self.code ):
            exported_tools = self.facet_db_get( ExportedTools, {} )
            exported_tools[ self.title ] = ( file_name, self.class_name )
            self.facet_db_set( ExportedTools, exported_tools )
            self.facet_db_set( 'path', self.path )
            self.status = '%s saved on %s' % ( file_name, time_stamp() )
        else:
            self.status = 'Error occurred trying to write %s' % file_name

    #-- Private Methods --------------------------------------------------------

    def _format_template ( self, template ):
        """ Formats the *template* string for output as part of the generated
            class code.
        """
        n = len( template )
        if n <= 63:
            return template

        chunks    = []
        chunk     = '('
        available = 62
        i         = 0
        while i < n:
            c = template[ i ]
            if c == '\\':
                i += 1
                c += template[ i ]

            i += 1
            available -= len( c )
            if available < 0:
                chunks.append( chunk + '"' )
                chunk     = '        "%s' % c
                available = 70 - len( c )
            else:
                chunk += c

        chunks.append( chunk + ')')

        return '\n'.join( chunks )

#-------------------------------------------------------------------------------
#  'PerspectiveAction' class:
#-------------------------------------------------------------------------------

class PerspectiveAction ( Action ):
    """ Switches to a specified perspective.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The Tools object this action is associated with:
    tools = Instance( Tools )

    #-- Action Interface -------------------------------------------------------

    def perform ( self ):
        """ Switch to the associated perspective.
        """
        self.tools.perspective_name = str( self.name )

#-------------------------------------------------------------------------------
#  'ChangePerspective' class:
#-------------------------------------------------------------------------------

class ChangePerspective ( Handler ):
    """ View used when adding or renaming a perspective.
    """

    #-- Facet Definitions ------------------------------------------------------

    # The Tools object associated with the request:
    info = Instance( UIInfo )

    # The Tools object associated with the request:
    tools = Instance( Tools )

    # The name of the perspective to be added:
    name = Str

    #-- Facet View Definitions -------------------------------------------------

    view = View(
        Item( 'name' ),
        buttons = [ 'OK', 'Cancel' ],
        title   = 'Enter new perspective name',
        id      = 'facets.extra.tools.tools.ChangePerspective',
        width   = 300,
        kind    = 'livemodal'
    )

    #-- Facets Default Values --------------------------------------------------

    def _name_default ( self ):
        return self.tools.perspective_name

    #-- Facet Event Handlers ---------------------------------------------------

    def _name_set ( self ):
        name = user_name_for( self.name )
        self.info.ui.errors = ((name == '') or
                               (name in self.tools.perspective_names))

    #-- Handler Interface ------------------------------------------------------

    def init ( self, info ):
        self.info = info
        self._name_set()

        return True

#-- EOF ------------------------------------------------------------------------